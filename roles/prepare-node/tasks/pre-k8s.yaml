---
- name: Check dependency for that region
  include_tasks: checks.yaml
- block:
  - name: Get interface type if it isn't defined
    shell: ls /proc/net/bonding/* | xargs -I{} basename {}
    register: stat_bond
    changed_when: false
  - name: Set bond name
    set_fact: 
      bond_name: "{{stat_bond.stdout_lines | first}}"
    when: stat_bond.stdout_lines | length > 0
  - name: Set interface type
    set_fact:
      iface_type: "{% if stat_bond.stdout_lines | length != 0 %}bond{%else%}interface{%endif%}"
  when: iface_type is not defined
- block:
  - name: "Config network interfaces ({{iface_type}} mode - NETPLAN) "
    template:
      src: "iface_18_{{iface_type}}.conf.j2"
      dest: /etc/netplan/60-osh-iface.yaml
      # Force set to false because after routes will be added
      force: false
    register: netplan_config
  - name: "Apply new network configuration"
    shell: netplan apply
    when: "netplan_config.changed"
  when: "ansible_distribution_version == '18.04'"
- block:
  # only for test purpose
  - name: "Config network interfaces ({{iface_type}} mode - IFUPDOWN)"
    template:
      src: "iface_16_{{iface_type}}.conf.j2"
      dest: /etc/network/interfaces.d/60-osh-iface.cfg
  - name: "Apply new network configuration"
    shell: systemctl restart networking && sleep 10
  when: "ansible_distribution_version == '16.04'"
- name: Add dns servers
  template: 
    src: resolved.conf.j2
    dest: /etc/systemd/resolved.conf
  register: resovle_restart
- name: Restart systemd-resolved
  systemd:
    name: systemd-resolved
    state: restarted
  when: "resovle_restart.changed"
- name: Disable systemd-timesyncd
  systemd:
    name: systemd-timesyncd
    state: stopped
    masked: true
- name: Install required packages
  apt: name="{{item}}" state=present update_cache=true
  with_items:
  - "{{packages}}"
  register: packages
- name: Bring ntp service to valid state
  systemd: name=ntp state="{% if rack_ctl is defined and rack_ctl|bool%}stopped{%else%}started{%endif%}" masked="{% if rack_ctl is defined and rack_ctl|bool%}true{%else%}false{%endif%}"
# Separate kubelet, docker logs from other
- name: Force store journald logs on disk
  lineinfile:
    regexp: ^#?Storage=.*
    line: Storage=persistent
    state: present
    path: /etc/systemd/journald.conf
- name: Adjust rsyslog
  copy:
    dest: /etc/rsyslog.d/30-k8s.conf
    content: |
      :programname,isequal,"kubelet" /var/log/kubelet.log
      & stop
      :programname,isequal,"dockerd" /var/log/dockerd.log
      & stop
  notify: restart rsyslog
- name: Gather facts from servers
  setup:
  delegate_to: "{{ item }}"
  delegate_facts: True
  when: hostvars[item]['ansible_'+k8s.iface] is not defined or hostvars[item]['ansible_'+k8s.iface]['ipv4'] is not defined
  with_items: "{{ groups['k8s-cluster'] }}"
  run_once: true
- name: Add dns names to hosts
  lineinfile:
    line: "{{hostvars[item.1]['ansible_'+hostvars[inventory_hostname][item.0]['iface']]['ipv4']['address']}} {{hostvars[item.1]['ansible_hostname']}}{%if fqdn_hostnames %}.{{int_domain_suffix}}{%endif%}"
    path: /etc/hosts
    state: present
  with_nested:
  - ["k8s","ceph"]
  - "{{ groups['k8s-cluster'] }}"
- name: Add endpoints to hosts for rbd provision
  lineinfile:
    line: "{{hostvars[item.0]['ansible_'+ceph.iface]['ipv4']['address']}} {{item.1}}"
    path: /etc/hosts
    state: present
  with_nested:
  - "{{ groups['control-plane'] }}"
  - "{{ endpoints }}"
  when: "endpoints | length != 0 and 'maas' not in group_names"
- name: Disable swap
  lineinfile:
    regexp: 'swap'
    state: absent
    path: '/etc/fstab'
- name: Add ntp config
  template:
    src: ntp.conf.j2
    dest: /etc/ntp.conf
- name: Ensure share_creds directory exist
  file: 
    path: "{{inventory_dir}}/../share_creds"
    state: directory
  delegate_to: localhost
  run_once: true
