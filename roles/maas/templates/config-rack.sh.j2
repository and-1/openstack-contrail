#!/bin/bash

# Copyright 2017 The Openstack-Helm Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -x

import_tries=0

TRY_LIMIT=${TRY_LIMIT:-1}
JOB_TIMEOUT=${JOB_TIMEOUT:-900}
RETRY_TIMER=${RETRY_TIMER:-30}

function wait_rack {

  while [[ ${JOB_TIMEOUT} -gt 0 ]]
  do
      if $(maas ${ADMIN_USERNAME} rack-controllers read | tail -n +1 | jq -r '.[] | .hostname' | grep -qE "\b$(hostname)\b");then
        return 0
      fi
      let JOB_TIMEOUT-=${RETRY_TIMER}
      sleep ${RETRY_TIMER}
  done
  return 1
}

function set_zone {
# Ensure zone exist
  if ! $(maas ${ADMIN_USERNAME} zones read | jq -r '.[] | .name' | grep -qE "\b${REGION}\b");then
    maas ${ADMIN_USERNAME} zones create name=${REGION}
  fi
# Get rack id
  export rack_id=$(maas ${ADMIN_USERNAME} rack-controllers read | jq -r '.[] | if .hostname == "'$(hostname)'" then .system_id else empty end')
# Check current zone
  cur_zone=$(maas ${ADMIN_USERNAME} rack-controllers read | jq -r '.[] | if .hostname == "'$(hostname)'" then .zone.name else empty end')
  if [ "x$cur_zone" != "x${REGION}" ];then
    maas admin rack-controllers set-zone zone=${REGION} nodes=${rack_id}
  fi
  if ! $(maas ${ADMIN_USERNAME} spaces read | jq -r ' .[] | .name' | grep -q "${REGION}");then
    maas ${ADMIN_USERNAME} spaces create name=${REGION}
  fi
}

function config_pxe_net {
{% for iface in ansible_interfaces %}
{% if hostvars[ansible_hostname]['ansible_'+iface]['ipv4'] is defined and hostvars[ansible_hostname]['ansible_'+iface]['ipv4']['address'] == ansible_host %}
{% set iface_dict = hostvars[ansible_hostname]['ansible_'+iface]['ipv4'] %}
  subnet="{{(iface_dict['network']+'/'+iface_dict['netmask'])| ipaddr('net')}}"
  start_ip="{{(iface_dict['network'] | ipaddr('int') + MAAS_DHCP_RANGE.start) | ipaddr('address')}}"
  end_ip="{{(iface_dict['network'] | ipaddr('int') + MAAS_DHCP_RANGE.end) | ipaddr('address')}}"
  if_name="{{iface}}"
{% endif %}
{% endfor %}
  while ! $(maas ${ADMIN_USERNAME} subnets read | jq -r ' .[] | .name' | grep -q "$subnet");do
    sleep 5
  done
  iface_id=$(maas ${ADMIN_USERNAME} rack-controller read $rack_id | jq -r ' .interface_set[] | if .name == "'$if_name'" then .id else empty end')

  fabric_id=$(maas ${ADMIN_USERNAME} fabrics read | jq -r '.[] | if .name == "DEFAULT_'${REGION}'" then .id else empty end')
  if [ "x$fabric_id" == "x" ];then
     fabric_id=$(maas ${ADMIN_USERNAME} fabrics create name="DEFAULT_${REGION}" | jq '.id')
  fi
  subnet_id=$(maas ${ADMIN_USERNAME} subnets read | jq -r '.[] | if .cidr == "'$subnet'" then .id else empty end')
  vid=$(maas ${ADMIN_USERNAME} fabric read $fabric_id | jq -r '.vlans | .[] | if .vid == 0 then .id else empty end')
  maas ${ADMIN_USERNAME} subnet update $subnet_id vlan=$vid
  maas ${ADMIN_USERNAME} ipranges create type=dynamic start_ip=${start_ip} end_ip=${end_ip}
  maas ${ADMIN_USERNAME} ipranges create type=reserved start_ip={{vip_ip}} end_ip={{vip_ip}} comment="VIP"
  maas ${ADMIN_USERNAME} interface update $rack_id $iface_id vlan=$vid
  maas ${ADMIN_USERNAME} vlan update $fabric_id 0 dhcp_on=true space=${REGION} primary_rack=${rack_id}
}


maas login ${ADMIN_USERNAME} ${MAAS_ENDPOINT} $MAAS_API_KEY
wait_rack
set_zone
config_pxe_net
