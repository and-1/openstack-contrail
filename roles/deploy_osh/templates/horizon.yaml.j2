modules:
  ENABLE_CLOUDKITTY: 'no'
  ENABLE_DESIGNATE: 'no'
  ENABLE_FWAAS: 'no'
  ENABLE_FREEZER: 'no'
  ENABLE_HEAT: 'yes'
  ENABLE_IRONIC: 'no'
  ENABLE_KARBOR: 'no'
  ENABLE_MAGNUM: 'no'
  ENABLE_MANILA: 'no'
  ENABLE_MURANO: 'no'
  ENABLE_MISTRAL: 'no'
  ENABLE_NEUTRON_LBAAS: 'yes'
  ENABLE_OCTAVIA: 'no'
  ENABLE_SAHARA: 'no'
  ENABLE_SEARCHLIGHT: 'no'
  ENABLE_SENLIN: 'no'
  ENABLE_SOLUM: 'no'
  ENABLE_TACKER: 'no'
  ENABLE_TROVE: 'no'
  ENABLE_VITRAGE: 'no'
  ENABLE_WATCHER: 'no'
  ENABLE_ZAQAR: 'no'
  ENABLE_ZUN: 'no'
pod:
  replicas:
{% for pod, rep in replicas[item.name].iteritems() %}
    {{pod}}: {%if cp_mode == "single" %}1{%else%}{{rep}}{%endif%}

{% endfor %}
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
    disruption_budget:
      horizon:
        min_available: 0
    termination_grace_period:
      horizon:
        timeout: 30
  resources:
    enabled: {{pod_resources}}
    server:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_drop:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      image_repo_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

# Bug in horizon. https://bugzilla.redhat.com/show_bug.cgi?id=1478042
conf:
  horizon:
    apache: |
{%- raw %}
      Listen 0.0.0.0:{{ tuple "dashboard" "internal" "web" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}
      LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
      LogFormat "%{X-Forwarded-For}i %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" proxy
      SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
      CustomLog /dev/stdout combined env=!forwarded
      CustomLog /dev/stdout proxy env=forwarded
      <VirtualHost *:{{ tuple "dashboard" "internal" "web" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}>
{% endraw %}
          WSGIScriptReloading On
          WSGIDaemonProcess horizon-http processes={{horizon.processes}} threads={{horizon.threads}} user=horizon group=horizon display-name=%{GROUP} python-path=/var/lib/kolla/venv/lib/python2.7/site-packages
          WSGIProcessGroup horizon-http
          WSGIScriptAlias / /var/www/cgi-bin/horizon/django.wsgi
          WSGIPassAuthorization On
          WSGIApplicationGroup %{GLOBAL}
          <Location "/">
              Require all granted
          </Location>
          Alias /static /var/www/html/horizon
          <Location "/static">
              SetHandler None
          </Location>
          <IfVersion >= 2.4>
            ErrorLogFormat "%{cu}t %M"
          </IfVersion>
          ErrorLog /dev/stdout
          TransferLog /dev/stdout
          SetEnvIf X-Forwarded-For "^.*\..*\..*\..*" forwarded
          CustomLog /dev/stdout combined env=!forwarded
          CustomLog /dev/stdout proxy env=forwarded
      </Virtualhost>
    local_settings:
      config:
        secret_key: {{horizon_secret_key}}
        debug: "False"
        keystone_multidomain_support: "True"
        keystone_default_domain: Default
        site_branding: "Logistic Cloud"
        openstack_cinder_features:
          enable_backup: "True"
        openstack_neutron_network:
          enable_router: "True"
          enable_quotas: "True"
          enable_ipv6: "True"
          enable_distributed_router: "False"
          enable_ha_router: "False"
          enable_lb: "True"
          enable_firewall: "True"
          enable_vpn: "True"
          enable_fip_topology_check: "True"
{%- raw %}
      template: |
        import os
        from django.utils.translation import ugettext_lazy as _
        from openstack_dashboard import exceptions
        DEBUG = {{ .Values.conf.horizon.local_settings.config.debug }}
        TEMPLATE_DEBUG = DEBUG
        COMPRESS_OFFLINE = True
        COMPRESS_CSS_HASHING_METHOD = "hash"
        SITE_BRANDING = "{{ .Values.conf.horizon.local_settings.config.site_branding }}"
        # WEBROOT is the location relative to Webserver root
        # should end with a slash.
        WEBROOT = '/'
        # LOGIN_URL = WEBROOT + 'auth/login/'
        # LOGOUT_URL = WEBROOT + 'auth/logout/'
        #
        AVAILABLE_THEMES = [
             ('default', 'Default', 'themes/default'),
        ]
        ENABLE_JUJU_PANEL = False
        # LOGIN_REDIRECT_URL can be used as an alternative for
        # HORIZON_CONFIG.user_home, if user_home is not set.
        # Do not set it to '/home/', as this will cause circular redirect loop
        # LOGIN_REDIRECT_URL = WEBROOT
        # Required for Django 1.5.
        # If horizon is running in production (DEBUG is False), set this
        # with the list of host/domain names that the application can serve.
        # For more information see:
        # https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
        ALLOWED_HOSTS = ['*']
        # Set SSL proxy settings:
        # For Django 1.4+ pass this header from the proxy after terminating the SSL,
        # and don't forget to strip it from the client's request.
        # For more information see:
        # https://docs.djangoproject.com/en/1.4/ref/settings/#secure-proxy-ssl-header
        #SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')
        # https://docs.djangoproject.com/en/1.5/ref/settings/#secure-proxy-ssl-header
        #SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
        # If Horizon is being served through SSL, then uncomment the following two
        # settings to better secure the cookies from security exploits
        #CSRF_COOKIE_SECURE = True
        #SESSION_COOKIE_SECURE = True
        # Overrides for OpenStack API versions. Use this setting to force the
        # OpenStack dashboard to use a specific API version for a given service API.
        # Versions specified here should be integers or floats, not strings.
        # NOTE: The version should be formatted as it appears in the URL for the
        # service API. For example, The identity service APIs have inconsistent
        # use of the decimal point, so valid options would be 2.0 or 3.
        #OPENSTACK_API_VERSIONS = {
        #    "data-processing": 1.1,
        #    "identity": 3,
        #    "volume": 2,
        #}
        OPENSTACK_API_VERSIONS = {
            "identity": 3,
        }
        # Set this to True if running on multi-domain model. When this is enabled, it
        # will require user to enter the Domain name in addition to username for login.
        OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = '{{ .Values.conf.horizon.local_settings.config.keystone_multidomain_support }}'
        # Overrides the default domain used when running on single-domain model
        # with Keystone V3. All entities will be created in the default domain.
        OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = '{{ .Values.conf.horizon.local_settings.config.keystone_default_domain }}'
        # Set Console type:
        # valid options are "AUTO"(default), "VNC", "SPICE", "RDP", "SERIAL" or None
        # Set to None explicitly if you want to deactivate the console.
        #CONSOLE_TYPE = "AUTO"
        # Default OpenStack Dashboard configuration.
        HORIZON_CONFIG = {
            'user_home': 'openstack_dashboard.views.get_user_home',
            'ajax_queue_limit': 10,
            'auto_fade_alerts': {
                'delay': 3000,
                'fade_duration': 1500,
                'types': ['alert-success', 'alert-info']
            },
            'help_url': "http://docs.openstack.org",
            'exceptions': {'recoverable': exceptions.RECOVERABLE,
                           'not_found': exceptions.NOT_FOUND,
                           'unauthorized': exceptions.UNAUTHORIZED},
            'modal_backdrop': 'static',
            'angular_modules': [],
            'js_files': [],
            'js_spec_files': [],
        }
        # Specify a regular expression to validate user passwords.
        #HORIZON_CONFIG["password_validator"] = {
        #    "regex": '.*',
        #    "help_text": _("Your password does not meet the requirements."),
        #}
        # Disable simplified floating IP address management for deployments with
        # multiple floating IP pools or complex network requirements.
        #HORIZON_CONFIG["simple_ip_management"] = False
        # Turn off browser autocompletion for forms including the login form and
        # the database creation workflow if so desired.
        #HORIZON_CONFIG["password_autocomplete"] = "off"
        # Setting this to True will disable the reveal button for password fields,
        # including on the login form.
        #HORIZON_CONFIG["disable_password_reveal"] = False
        LOCAL_PATH = '/tmp'
        # Set custom secret key:
        # You can either set it to a specific value or you can let horizon generate a
        # default secret key that is unique on this machine, e.i. regardless of the
        # amount of Python WSGI workers (if used behind Apache+mod_wsgi): However,
        # there may be situations where you would want to set this explicitly, e.g.
        # when multiple dashboard instances are distributed on different machines
        # (usually behind a load-balancer). Either you have to make sure that a session
        # gets all requests routed to the same dashboard instance or you set the same
        # SECRET_KEY for all of them.
        SECRET_KEY='{{ .Values.conf.horizon.local_settings.config.horizon_secret_key }}'
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                'LOCATION': '{{ tuple "oslo_cache" "internal" "memcache" . | include "helm-toolkit.endpoints.host_and_port_endpoint_uri_lookup" }}',
            }
        }
        DATABASES = {
            'default': {
                # Database configuration here
                'ENGINE': 'django.db.backends.mysql',
                'NAME': '{{ .Values.endpoints.oslo_db.path | base }}',
                'USER': '{{ .Values.endpoints.oslo_db.auth.horizon.username }}',
                'PASSWORD': '{{ .Values.endpoints.oslo_db.auth.horizon.password }}',
                'HOST': '{{ tuple "oslo_db" "internal" . | include "helm-toolkit.endpoints.hostname_fqdn_endpoint_lookup" }}',
                'default-character-set': 'utf8',
                'PORT': '{{ tuple "oslo_db" "internal" "mysql" . | include "helm-toolkit.endpoints.endpoint_port_lookup" }}'
            }
        }
        SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
        # Send email to the console by default
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        # Or send them to /dev/null
        #EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'
        # Configure these for your outgoing email host
        #EMAIL_HOST = 'smtp.my-company.com'
        #EMAIL_PORT = 25\\
        #EMAIL_HOST_USER = 'djangomail'
        #EMAIL_HOST_PASSWORD = 'top-secret!'
        # For multiple regions uncomment this configuration, and add (endpoint, title).
        #AVAILABLE_REGIONS = []
        OPENSTACK_KEYSTONE_URL = "{{ tuple "identity" "public" "api" . | include "helm-toolkit.endpoints.keystone_endpoint_uri_lookup" }}"
        OPENSTACK_KEYSTONE_DEFAULT_ROLE = "member"
        {{- if .Values.conf.horizon.local_settings.config.auth.sso.enabled }}
        # Enables keystone web single-sign-on if set to True.
        WEBSSO_ENABLED = True
        # Determines which authentication choice to show as default.
        WEBSSO_INITIAL_CHOICE = "{{ .Values.conf.horizon.local_settings.config.auth.sso.initial_choice }}"
        # The list of authentication mechanisms
        # which include keystone federation protocols.
        # Current supported protocol IDs are 'saml2' and 'oidc'
        # which represent SAML 2.0, OpenID Connect respectively.
        # Do not remove the mandatory credentials mechanism.
        WEBSSO_CHOICES = (
            ("credentials", _("Keystone Credentials")),
          {{- range $i, $sso := .Values.conf.horizon.local_settings.config.auth.idp_mapping }}
            ({{ $sso.name | quote }}, {{ $sso.label | quote }}),
          {{- end }}
        )
        WEBSSO_IDP_MAPPING = {
          {{- range $i, $sso := .Values.conf.horizon.local_settings.config.auth.idp_mapping }}
            {{ $sso.name | quote}}: ({{ $sso.idp | quote }}, {{ $sso.protocol | quote }}),
          {{- end }}
        }
        {{- end }}
        # Disable SSL certificate checks (useful for self-signed certificates):
        #OPENSTACK_SSL_NO_VERIFY = True
        # The CA certificate to use to verify SSL connections
        #OPENSTACK_SSL_CACERT = '/path/to/cacert.pem'
        # The OPENSTACK_KEYSTONE_BACKEND settings can be used to identify the
        # capabilities of the auth backend for Keystone.
        # If Keystone has been configured to use LDAP as the auth backend then set
        # can_edit_user to False and name to 'ldap'.
        #
        # TODO(tres): Remove these once Keystone has an API to identify auth backend.
        OPENSTACK_KEYSTONE_BACKEND = {
            'name': 'native',
            'can_edit_user': True,
            'can_edit_group': True,
            'can_edit_project': True,
            'can_edit_domain': True,
            'can_edit_role': True,
        }
        # Setting this to True, will add a new "Retrieve Password" action on instance,
        # allowing Admin session password retrieval/decryption.
        #OPENSTACK_ENABLE_PASSWORD_RETRIEVE = False
        # The Launch Instance user experience has been significantly enhanced.
        # You can choose whether to enable the new launch instance experience,
        # the legacy experience, or both. The legacy experience will be removed
        # in a future release, but is available as a temporary backup setting to ensure
        # compatibility with existing deployments. Further development will not be
        # done on the legacy experience. Please report any problems with the new
        # experience via the Launchpad tracking system.
        #
        # Toggle LAUNCH_INSTANCE_LEGACY_ENABLED and LAUNCH_INSTANCE_NG_ENABLED to
        # determine the experience to enable.  Set them both to true to enable
        # both.
        #LAUNCH_INSTANCE_LEGACY_ENABLED = True
        #LAUNCH_INSTANCE_NG_ENABLED = False
        # The Xen Hypervisor has the ability to set the mount point for volumes
        # attached to instances (other Hypervisors currently do not). Setting
        # can_set_mount_point to True will add the option to set the mount point
        # from the UI.
        OPENSTACK_HYPERVISOR_FEATURES = {
            'can_set_mount_point': False,
            'can_set_password': False,
        }
        # The OPENSTACK_CINDER_FEATURES settings can be used to enable optional
        # services provided by cinder that is not exposed by its extension API.
        OPENSTACK_CINDER_FEATURES = {
            'enable_backup': {{ .Values.conf.horizon.local_settings.config.openstack_cinder_features.enable_backup }},
        }
        # The OPENSTACK_NEUTRON_NETWORK settings can be used to enable optional
        # services provided by neutron. Options currently available are load
        # balancer service, security groups, quotas, VPN service.
        OPENSTACK_NEUTRON_NETWORK = {
            'enable_router': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_router }},
            'enable_quotas': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_quotas }},
            'enable_ipv6': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_ipv6 }},
            'enable_distributed_router': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_distributed_router }},
            'enable_ha_router': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_ha_router }},
            'enable_lb': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_lb }},
            'enable_firewall': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_firewall }},
            'enable_vpn': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_vpn }},
            'enable_fip_topology_check': {{ .Values.conf.horizon.local_settings.config.openstack_neutron_network.enable_fip_topology_check }},
            # The profile_support option is used to detect if an external router can be
            # configured via the dashboard. When using specific plugins the
            # profile_support can be turned on if needed.
            'profile_support': None,
            #'profile_support': 'cisco',
            # Set which provider network types are supported. Only the network types
            # in this list will be available to choose from when creating a network.
            # Network types include local, flat, vlan, gre, and vxlan.
            'supported_provider_types': ['*'],
            # Set which VNIC types are supported for port binding. Only the VNIC
            # types in this list will be available to choose from when creating a
            # port.
            # VNIC types include 'normal', 'macvtap' and 'direct'.
            'supported_vnic_types': ['*']
        }
        # The OPENSTACK_IMAGE_BACKEND settings can be used to customize features
        # in the OpenStack Dashboard related to the Image service, such as the list
        # of supported image formats.
        #OPENSTACK_IMAGE_BACKEND = {
        #    'image_formats': [
        #        ('', _('Select format')),
        #        ('aki', _('AKI - Amazon Kernel Image')),
        #        ('ami', _('AMI - Amazon Machine Image')),
        #        ('ari', _('ARI - Amazon Ramdisk Image')),
        #        ('docker', _('Docker')),
        #        ('iso', _('ISO - Optical Disk Image')),
        #        ('ova', _('OVA - Open Virtual Appliance')),
        #        ('qcow2', _('QCOW2 - QEMU Emulator')),
        #        ('raw', _('Raw')),
        #        ('vdi', _('VDI - Virtual Disk Image')),
        #        ('vhd', ('VHD - Virtual Hard Disk')),
        #        ('vmdk', _('VMDK - Virtual Machine Disk')),
        #    ]
        #}
        # The IMAGE_CUSTOM_PROPERTY_TITLES settings is used to customize the titles for
        # image custom property attributes that appear on image detail pages.
        IMAGE_CUSTOM_PROPERTY_TITLES = {
            "architecture": _("Architecture"),
            "kernel_id": _("Kernel ID"),
            "ramdisk_id": _("Ramdisk ID"),
            "image_state": _("Euca2ools state"),
            "project_id": _("Project ID"),
            "image_type": _("Image Type"),
        }
        # The IMAGE_RESERVED_CUSTOM_PROPERTIES setting is used to specify which image
        # custom properties should not be displayed in the Image Custom Properties
        # table.
        IMAGE_RESERVED_CUSTOM_PROPERTIES = []
        # OPENSTACK_ENDPOINT_TYPE specifies the endpoint type to use for the endpoints
        # in the Keystone service catalog. Use this setting when Horizon is running
        # external to the OpenStack environment. The default is 'publicURL'.
        OPENSTACK_ENDPOINT_TYPE = "publicURL"
        # SECONDARY_ENDPOINT_TYPE specifies the fallback endpoint type to use in the
        # case that OPENSTACK_ENDPOINT_TYPE is not present in the endpoints
        # in the Keystone service catalog. Use this setting when Horizon is running
        # external to the OpenStack environment. The default is None.  This
        # value should differ from OPENSTACK_ENDPOINT_TYPE if used.
        SECONDARY_ENDPOINT_TYPE = "publicURL"
        # The number of objects (Swift containers/objects or images) to display
        # on a single page before providing a paging element (a "more" link)
        # to paginate results.
        API_RESULT_LIMIT = 1000
        API_RESULT_PAGE_SIZE = 20
        # The size of chunk in bytes for downloading objects from Swift
        SWIFT_FILE_TRANSFER_CHUNK_SIZE = 512 * 1024
        # Specify a maximum number of items to display in a dropdown.
        DROPDOWN_MAX_ITEMS = 30
        # The timezone of the server. This should correspond with the timezone
        # of your entire OpenStack installation, and hopefully be in UTC.
        TIME_ZONE = "UTC"
        # When launching an instance, the menu of available flavors is
        # sorted by RAM usage, ascending. If you would like a different sort order,
        # you can provide another flavor attribute as sorting key. Alternatively, you
        # can provide a custom callback method to use for sorting. You can also provide
        # a flag for reverse sort. For more info, see
        # http://docs.python.org/2/library/functions.html#sorted
        #CREATE_INSTANCE_FLAVOR_SORT = {
        #    'key': 'name',
        #     # or
        #    'key': my_awesome_callback_method,
        #    'reverse': False,
        #}
        # Set this to True to display an 'Admin Password' field on the Change Password
        # form to verify that it is indeed the admin logged-in who wants to change
        # the password.
        # ENFORCE_PASSWORD_CHECK = False
        # Modules that provide /auth routes that can be used to handle different types
        # of user authentication. Add auth plugins that require extra route handling to
        # this list.
        #AUTHENTICATION_URLS = [
        #    'openstack_auth.urls',
        #]
        # The Horizon Policy Enforcement engine uses these values to load per service
        # policy rule files. The content of these files should match the files the
        # OpenStack services are using to determine role based access control in the
        # target installation.
        # Path to directory containing policy.json files
        POLICY_FILES_PATH = '/etc/openstack-dashboard'
        # Map of local copy of service policy files
        #POLICY_FILES = {
        #    'identity': 'keystone_policy.json',
        #    'compute': 'nova_policy.json',
        #    'volume': 'cinder_policy.json',
        #    'image': 'glance_policy.json',
        #    'orchestration': 'heat_policy.json',
        #    'network': 'neutron_policy.json',
        #    'telemetry': 'ceilometer_policy.json',
        #}
        # Trove user and database extension support. By default support for
        # creating users and databases on database instances is turned on.
        # To disable these extensions set the permission here to something
        # unusable such as ["!"].
        # TROVE_ADD_USER_PERMS = []
        # TROVE_ADD_DATABASE_PERMS = []
        # Change this patch to the appropriate static directory containing
        # two files: _variables.scss and _styles.scss
        #CUSTOM_THEME_PATH = 'static/themes/default'
        LOGGING = {
            'version': 1,
            # When set to True this will disable all logging except
            # for loggers specified in this configuration dictionary. Note that
            # if nothing is specified here and disable_existing_loggers is True,
            # django.db.backends will still log unless it is disabled explicitly.
            'disable_existing_loggers': False,
            'handlers': {
                'null': {
                    'level': 'DEBUG',
                    'class': 'logging.NullHandler',
                },
                'console': {
                    # Set the level to "DEBUG" for verbose output logging.
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                },
            },
            'loggers': {
                # Logging from django.db.backends is VERY verbose, send to null
                # by default.
                'django.db.backends': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'requests': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'horizon': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'openstack_dashboard': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'novaclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'cinderclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'glanceclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'glanceclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'neutronclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'heatclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'ceilometerclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'troveclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'swiftclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'openstack_auth': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'nose.plugins.manager': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'iso8601': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'scss': {
                    'handlers': ['null'],
                    'propagate': False,
                },
            }
        }
        # 'direction' should not be specified for all_tcp/udp/icmp.
        # It is specified in the form.
        SECURITY_GROUP_RULES = {
            'all_tcp': {
                'name': _('All TCP'),
                'ip_protocol': 'tcp',
                'from_port': '1',
                'to_port': '65535',
            },
            'all_udp': {
                'name': _('All UDP'),
                'ip_protocol': 'udp',
                'from_port': '1',
                'to_port': '65535',
            },
            'all_icmp': {
                'name': _('All ICMP'),
                'ip_protocol': 'icmp',
                'from_port': '-1',
                'to_port': '-1',
            },
            'ssh': {
                'name': 'SSH',
                'ip_protocol': 'tcp',
                'from_port': '22',
                'to_port': '22',
            },
            'smtp': {
                'name': 'SMTP',
                'ip_protocol': 'tcp',
                'from_port': '25',
                'to_port': '25',
            },
            'dns': {
                'name': 'DNS',
                'ip_protocol': 'tcp',
                'from_port': '53',
                'to_port': '53',
            },
            'http': {
                'name': 'HTTP',
                'ip_protocol': 'tcp',
                'from_port': '80',
                'to_port': '80',
            },
            'pop3': {
                'name': 'POP3',
                'ip_protocol': 'tcp',
                'from_port': '110',
                'to_port': '110',
            },
            'imap': {
                'name': 'IMAP',
                'ip_protocol': 'tcp',
                'from_port': '143',
                'to_port': '143',
            },
            'ldap': {
                'name': 'LDAP',
                'ip_protocol': 'tcp',
                'from_port': '389',
                'to_port': '389',
            },
            'https': {
                'name': 'HTTPS',
                'ip_protocol': 'tcp',
                'from_port': '443',
                'to_port': '443',
            },
            'smtps': {
                'name': 'SMTPS',
                'ip_protocol': 'tcp',
                'from_port': '465',
                'to_port': '465',
            },
            'imaps': {
                'name': 'IMAPS',
                'ip_protocol': 'tcp',
                'from_port': '993',
                'to_port': '993',
            },
            'pop3s': {
                'name': 'POP3S',
                'ip_protocol': 'tcp',
                'from_port': '995',
                'to_port': '995',
            },
            'ms_sql': {
                'name': 'MS SQL',
                'ip_protocol': 'tcp',
                'from_port': '1433',
                'to_port': '1433',
            },
            'mysql': {
                'name': 'MYSQL',
                'ip_protocol': 'tcp',
                'from_port': '3306',
                'to_port': '3306',
            },
            'rdp': {
                'name': 'RDP',
                'ip_protocol': 'tcp',
                'from_port': '3389',
                'to_port': '3389',
            },
        }
        # Deprecation Notice:
        #
        # The setting FLAVOR_EXTRA_KEYS has been deprecated.
        # Please load extra spec metadata into the Glance Metadata Definition Catalog.
        #
        # The sample quota definitions can be found in:
        # <glance_source>/etc/metadefs/compute-quota.json
        #
        # The metadata definition catalog supports CLI and API:
        #  $glance --os-image-api-version 2 help md-namespace-import
        #  $glance-manage db_load_metadefs <directory_with_definition_files>
        #
        # See Metadata Definitions on: http://docs.openstack.org/developer/glance/
        # Indicate to the Sahara data processing service whether or not
        # automatic floating IP allocation is in effect.  If it is not
        # in effect, the user will be prompted to choose a floating IP
        # pool for use in their cluster.  False by default.  You would want
        # to set this to True if you were running Nova Networking with
        # auto_assign_floating_ip = True.
        #SAHARA_AUTO_IP_ALLOCATION_ENABLED = False
        # The hash algorithm to use for authentication tokens. This must
        # match the hash algorithm that the identity server and the
        # auth_token middleware are using. Allowed values are the
        # algorithms supported by Python's hashlib library.
        #OPENSTACK_TOKEN_HASH_ALGORITHM = 'md5'
        # AngularJS requires some settings to be made available to
        # the client side. Some settings are required by in-tree / built-in horizon
        # features. These settings must be added to REST_API_REQUIRED_SETTINGS in the
        # form of ['SETTING_1','SETTING_2'], etc.
        #
        # You may remove settings from this list for security purposes, but do so at
        # the risk of breaking a built-in horizon feature. These settings are required
        # for horizon to function properly. Only remove them if you know what you
        # are doing. These settings may in the future be moved to be defined within
        # the enabled panel configuration.
        # You should not add settings to this list for out of tree extensions.
        # See: https://wiki.openstack.org/wiki/Horizon/RESTAPI
        REST_API_REQUIRED_SETTINGS = ['OPENSTACK_HYPERVISOR_FEATURES',
                                      'LAUNCH_INSTANCE_DEFAULTS',
                                      'OPENSTACK_IMAGE_FORMATS']
        # Additional settings can be made available to the client side for
        # extensibility by specifying them in REST_API_ADDITIONAL_SETTINGS
        # !! Please use extreme caution as the settings are transferred via HTTP/S
        # and are not encrypted on the browser. This is an experimental API and
        # may be deprecated in the future without notice.
        #REST_API_ADDITIONAL_SETTINGS = []
        # DISALLOW_IFRAME_EMBED can be used to prevent Horizon from being embedded
        # within an iframe. Legacy browsers are still vulnerable to a Cross-Frame
        # Scripting (XFS) vulnerability, so this option allows extra security hardening
        # where iframes are not used in deployment. Default setting is True.
        # For more information see:
        # http://tinyurl.com/anticlickjack
        # DISALLOW_IFRAME_EMBED = True
        STATIC_ROOT = '/var/www/html/horizon'
{% endraw %}
    policy:
      keystone:
        admin_required: "role:admin"
        cloud_admin: "role:admin and (is_admin_project:True or domain_id:default)"
        service_role: "role:service"
        service_or_admin: "rule:admin_required or rule:service_role"
        owner: "user_id:%(user_id)s or user_id:%(target.token.user_id)s"
        admin_or_owner: "(rule:admin_required and domain_id:%(target.token.user.domain.id)s) or rule:owner"
        admin_and_matching_domain_id: "rule:admin_required and domain_id:%(domain_id)s"
        service_admin_or_owner: "rule:service_or_admin or rule:owner"
        default: "rule:admin_required"
        "identity:get_region": ""
        "identity:list_regions": ""
        "identity:create_region": "rule:cloud_admin"
        "identity:update_region": "rule:cloud_admin"
        "identity:delete_region": "rule:cloud_admin"
        "identity:get_service": "rule:admin_required"
        "identity:list_services": "rule:admin_required"
        "identity:create_service": "rule:cloud_admin"
        "identity:update_service": "rule:cloud_admin"
        "identity:delete_service": "rule:cloud_admin"
        "identity:get_endpoint": "rule:admin_required"
        "identity:list_endpoints": "rule:admin_required"
        "identity:create_endpoint": "rule:cloud_admin"
        "identity:update_endpoint": "rule:cloud_admin"
        "identity:delete_endpoint": "rule:cloud_admin"
        "identity:get_registered_limit": ""
        "identity:list_registered_limits": ""
        "identity:create_registered_limits": "rule:admin_required"
        "identity:update_registered_limits": "rule:admin_required"
        "identity:delete_registered_limit": "rule:admin_required"
        "identity:get_limit": ""
        "identity:list_limits": ""
        "identity:create_limits": "rule:admin_required"
        "identity:update_limits": "rule:admin_required"
        "identity:delete_limit": "rule:admin_required"
        "identity:get_domain": "rule:cloud_admin or rule:admin_and_matching_domain_id or token.project.domain.id:%(target.domain.id)s"
        "identity:list_domains": "rule:cloud_admin"
        "identity:create_domain": "rule:cloud_admin"
        "identity:update_domain": "rule:cloud_admin"
        "identity:delete_domain": "rule:cloud_admin"
        "admin_and_matching_target_project_domain_id": "rule:admin_required and domain_id:%(target.project.domain_id)s"
        "admin_and_matching_project_domain_id": "rule:admin_required and domain_id:%(project.domain_id)s"
        "identity:get_project": "rule:cloud_admin or rule:admin_and_matching_target_project_domain_id or project_id:%(target.project.id)s"
        "identity:list_projects": "rule:cloud_admin or rule:admin_and_matching_domain_id"
        "identity:list_user_projects": "rule:owner or rule:admin_and_matching_domain_id"
        "identity:create_project": "rule:cloud_admin or rule:admin_and_matching_project_domain_id"
        "identity:update_project": "rule:cloud_admin or rule:admin_and_matching_target_project_domain_id"
        "identity:delete_project": "rule:cloud_admin or rule:admin_and_matching_target_project_domain_id"
        "identity:create_project_tag": "rule:admin_required"
        "identity:delete_project_tag": "rule:admin_required"
        "identity:get_project_tag": "rule:admin_required"
        "identity:list_project_tags": "rule:admin_required"
        "identity:delete_project_tags": "rule:admin_required"
        "identity:update_project_tags": "rule:admin_required"
        "admin_and_matching_target_user_domain_id": "rule:admin_required and domain_id:%(target.user.domain_id)s"
        "admin_and_matching_user_domain_id": "rule:admin_required and domain_id:%(user.domain_id)s"
        "identity:get_user": "rule:cloud_admin or rule:admin_and_matching_target_user_domain_id or rule:owner"
        "identity:list_users": "rule:cloud_admin or rule:admin_and_matching_domain_id"
        "identity:create_user": "rule:cloud_admin or rule:admin_and_matching_user_domain_id"
        "identity:update_user": "rule:cloud_admin or rule:admin_and_matching_target_user_domain_id"
        "identity:delete_user": "rule:cloud_admin or rule:admin_and_matching_target_user_domain_id"
        "admin_and_matching_target_group_domain_id": "rule:admin_required and domain_id:%(target.group.domain_id)s"
        "admin_and_matching_group_domain_id": "rule:admin_required and domain_id:%(group.domain_id)s"
        "identity:get_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:list_groups": "rule:cloud_admin or rule:admin_and_matching_domain_id"
        "identity:list_groups_for_user": "rule:owner or rule:admin_and_matching_target_user_domain_id"
        "identity:create_group": "rule:cloud_admin or rule:admin_and_matching_group_domain_id"
        "identity:update_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:delete_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:list_users_in_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:remove_user_from_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:check_user_in_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:add_user_to_group": "rule:cloud_admin or rule:admin_and_matching_target_group_domain_id"
        "identity:get_credential": "rule:admin_required"
        "identity:list_credentials": "rule:admin_required or user_id:%(user_id)s"
        "identity:create_credential": "rule:admin_required"
        "identity:update_credential": "rule:admin_required"
        "identity:delete_credential": "rule:admin_required"
        "identity:ec2_get_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)"
        "identity:ec2_list_credentials": "rule:admin_required or rule:owner"
        "identity:ec2_create_credential": "rule:admin_required or rule:owner"
        "identity:ec2_delete_credential": "rule:admin_required or (rule:owner and user_id:%(target.credential.user_id)s)"
        "identity:get_role": "rule:admin_required"
        "identity:list_roles": "rule:admin_required"
        "identity:create_role": "rule:cloud_admin"
        "identity:update_role": "rule:cloud_admin"
        "identity:delete_role": "rule:cloud_admin"
        "identity:get_domain_role": "rule:cloud_admin or rule:get_domain_roles"
        "identity:list_domain_roles": "rule:cloud_admin or rule:list_domain_roles"
        "identity:create_domain_role": "rule:cloud_admin or rule:domain_admin_matches_domain_role"
        "identity:update_domain_role": "rule:cloud_admin or rule:domain_admin_matches_target_domain_role"
        "identity:delete_domain_role": "rule:cloud_admin or rule:domain_admin_matches_target_domain_role"
        "domain_admin_matches_domain_role": "rule:admin_required and domain_id:%(role.domain_id)s"
        "get_domain_roles": "rule:domain_admin_matches_target_domain_role or rule:project_admin_matches_target_domain_role"
        "domain_admin_matches_target_domain_role": "rule:admin_required and domain_id:%(target.role.domain_id)s"
        "project_admin_matches_target_domain_role": "rule:admin_required and project_domain_id:%(target.role.domain_id)s"
        "list_domain_roles": "rule:domain_admin_matches_filter_on_list_domain_roles or rule:project_admin_matches_filter_on_list_domain_roles"
        "domain_admin_matches_filter_on_list_domain_roles": "rule:admin_required and domain_id:%(domain_id)s"
        "project_admin_matches_filter_on_list_domain_roles": "rule:admin_required and project_domain_id:%(domain_id)s"
        "admin_and_matching_prior_role_domain_id": "rule:admin_required and domain_id:%(target.prior_role.domain_id)s"
        "implied_role_matches_prior_role_domain_or_global": "(domain_id:%(target.implied_role.domain_id)s or None:%(target.implied_role.domain_id)s)"
        "identity:get_implied_role": "rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id"
        "identity:list_implied_roles": "rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id"
        "identity:create_implied_role": "rule:cloud_admin or (rule:admin_and_matching_prior_role_domain_id and rule:implied_role_matches_prior_role_domain_or_global)"
        "identity:delete_implied_role": "rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id"
        "identity:list_role_inference_rules": "rule:cloud_admin"
        "identity:check_implied_role": "rule:cloud_admin or rule:admin_and_matching_prior_role_domain_id"
        "identity:list_system_grants_for_user": "rule:admin_required"
        "identity:check_system_grant_for_user": "rule:admin_required"
        "identity:create_system_grant_for_user": "rule:admin_required"
        "identity:revoke_system_grant_for_user": "rule:admin_required"
        "identity:list_system_grants_for_group": "rule:admin_required"
        "identity:check_system_grant_for_group": "rule:admin_required"
        "identity:create_system_grant_for_group": "rule:admin_required"
        "identity:revoke_system_grant_for_group": "rule:admin_required"
        "identity:check_grant": "rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants"
        "identity:list_grants": "rule:cloud_admin or rule:domain_admin_for_list_grants or rule:project_admin_for_list_grants"
        "identity:create_grant": "rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants"
        "identity:revoke_grant": "rule:cloud_admin or rule:domain_admin_for_grants or rule:project_admin_for_grants"
        "domain_admin_for_grants": "rule:domain_admin_for_global_role_grants or rule:domain_admin_for_domain_role_grants"
        "domain_admin_for_global_role_grants": "rule:admin_required and None:%(target.role.domain_id)s and rule:domain_admin_grant_match"
        "domain_admin_for_domain_role_grants": "rule:admin_required and domain_id:%(target.role.domain_id)s and rule:domain_admin_grant_match"
        "domain_admin_grant_match": "domain_id:%(domain_id)s or domain_id:%(target.project.domain_id)s"
        "project_admin_for_grants": "rule:project_admin_for_global_role_grants or rule:project_admin_for_domain_role_grants"
        "project_admin_for_global_role_grants": "rule:admin_required and None:%(target.role.domain_id)s and project_id:%(project_id)s"
        "project_admin_for_domain_role_grants": "rule:admin_required and project_domain_id:%(target.role.domain_id)s and project_id:%(project_id)s"
        "domain_admin_for_list_grants": "rule:admin_required and rule:domain_admin_grant_match"
        "project_admin_for_list_grants": "rule:admin_required and project_id:%(project_id)s"
        "admin_on_domain_filter": "rule:admin_required and domain_id:%(scope.domain.id)s"
        "admin_on_project_filter": "rule:admin_required and project_id:%(scope.project.id)s"
        "admin_on_domain_of_project_filter": "rule:admin_required and domain_id:%(target.project.domain_id)s"
        "identity:list_role_assignments": "rule:cloud_admin or rule:admin_on_domain_filter or rule:admin_on_project_filter"
        "identity:list_role_assignments_for_tree": "rule:cloud_admin or rule:admin_on_domain_of_project_filter"
        "identity:get_policy": "rule:cloud_admin"
        "identity:list_policies": "rule:cloud_admin"
        "identity:create_policy": "rule:cloud_admin"
        "identity:update_policy": "rule:cloud_admin"
        "identity:delete_policy": "rule:cloud_admin"
        "identity:check_token": "rule:admin_or_owner"
        "identity:validate_token": "rule:service_admin_or_owner"
        "identity:validate_token_head": "rule:service_or_admin"
        "identity:revocation_list": "rule:service_or_admin"
        "identity:revoke_token": "rule:admin_or_owner"
        "identity:create_trust": "user_id:%(trust.trustor_user_id)s"
        "identity:list_trusts": ""
        "identity:list_roles_for_trust": ""
        "identity:get_role_for_trust": ""
        "identity:delete_trust": ""
        "identity:get_trust": ""
        "identity:create_consumer": "rule:admin_required"
        "identity:get_consumer": "rule:admin_required"
        "identity:list_consumers": "rule:admin_required"
        "identity:delete_consumer": "rule:admin_required"
        "identity:update_consumer": "rule:admin_required"
        "identity:authorize_request_token": "rule:admin_required"
        "identity:list_access_token_roles": "rule:admin_required"
        "identity:get_access_token_role": "rule:admin_required"
        "identity:list_access_tokens": "rule:admin_required"
        "identity:get_access_token": "rule:admin_required"
        "identity:delete_access_token": "rule:admin_required"
        "identity:list_projects_for_endpoint": "rule:admin_required"
        "identity:add_endpoint_to_project": "rule:admin_required"
        "identity:check_endpoint_in_project": "rule:admin_required"
        "identity:list_endpoints_for_project": "rule:admin_required"
        "identity:remove_endpoint_from_project": "rule:admin_required"
        "identity:create_endpoint_group": "rule:admin_required"
        "identity:list_endpoint_groups": "rule:admin_required"
        "identity:get_endpoint_group": "rule:admin_required"
        "identity:update_endpoint_group": "rule:admin_required"
        "identity:delete_endpoint_group": "rule:admin_required"
        "identity:list_projects_associated_with_endpoint_group": "rule:admin_required"
        "identity:list_endpoints_associated_with_endpoint_group": "rule:admin_required"
        "identity:get_endpoint_group_in_project": "rule:admin_required"
        "identity:list_endpoint_groups_for_project": "rule:admin_required"
        "identity:add_endpoint_group_to_project": "rule:admin_required"
        "identity:remove_endpoint_group_from_project": "rule:admin_required"
        "identity:create_identity_provider": "rule:cloud_admin"
        "identity:list_identity_providers": "rule:cloud_admin"
        "identity:get_identity_provider": "rule:cloud_admin"
        "identity:update_identity_provider": "rule:cloud_admin"
        "identity:delete_identity_provider": "rule:cloud_admin"
        "identity:create_protocol": "rule:cloud_admin"
        "identity:update_protocol": "rule:cloud_admin"
        "identity:get_protocol": "rule:cloud_admin"
        "identity:list_protocols": "rule:cloud_admin"
        "identity:delete_protocol": "rule:cloud_admin"
        "identity:create_mapping": "rule:cloud_admin"
        "identity:get_mapping": "rule:cloud_admin"
        "identity:list_mappings": "rule:cloud_admin"
        "identity:delete_mapping": "rule:cloud_admin"
        "identity:update_mapping": "rule:cloud_admin"
        "identity:create_service_provider": "rule:cloud_admin"
        "identity:list_service_providers": "rule:cloud_admin"
        "identity:get_service_provider": "rule:cloud_admin"
        "identity:update_service_provider": "rule:cloud_admin"
        "identity:delete_service_provider": "rule:cloud_admin"
        "identity:get_auth_catalog": ""
        "identity:get_auth_projects": ""
        "identity:get_auth_domains": ""
        "identity:get_auth_system": ""
        "identity:list_projects_for_user": ""
        "identity:list_domains_for_user": ""
        "identity:list_revoke_events": "rule:service_or_admin"
        "identity:create_policy_association_for_endpoint": "rule:cloud_admin"
        "identity:check_policy_association_for_endpoint": "rule:cloud_admin"
        "identity:delete_policy_association_for_endpoint": "rule:cloud_admin"
        "identity:create_policy_association_for_service": "rule:cloud_admin"
        "identity:check_policy_association_for_service": "rule:cloud_admin"
        "identity:delete_policy_association_for_service": "rule:cloud_admin"
        "identity:create_policy_association_for_region_and_service": "rule:cloud_admin"
        "identity:check_policy_association_for_region_and_service": "rule:cloud_admin"
        "identity:delete_policy_association_for_region_and_service": "rule:cloud_admin"
        "identity:get_policy_for_endpoint": "rule:cloud_admin"
        "identity:list_endpoints_for_policy": "rule:cloud_admin"
        "identity:create_domain_config": "rule:cloud_admin"
        "identity:get_domain_config": "rule:cloud_admin"
        "identity:get_security_compliance_domain_config": ""
        "identity:update_domain_config": "rule:cloud_admin"
        "identity:delete_domain_config": "rule:cloud_admin"
        "identity:get_domain_config_default": "rule:cloud_admin"
        "identity:get_application_credential": "rule:admin_or_owner"
        "identity:list_application_credentials": "rule:admin_or_owner"
        "identity:create_application_credential": "rule:admin_or_owner"
        "identity:delete_application_credential": "rule:admin_or_owner"
