# radosgw, rbd, swift or pvc
storage: rbd
pod:
  replicas:
{% for pod, rep in replicas[item.name].iteritems() %}
    {{pod}}: {%if cp_mode == "single" %}1{%else%}{{rep}}{%endif%}

{% endfor %}
  lifecycle:
    upgrades:
      deployments:
        revision_history: 3
        pod_replacement_strategy: RollingUpdate
        rolling_update:
          max_unavailable: 1
          max_surge: 3
    disruption_budget:
      api:
        min_available: 0
      registry:
        min_available: 0
  resources:
    enabled: {{pod_resources}}
    api:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    registry:
      requests:
        memory: "128Mi"
        cpu: "100m"
      limits:
        memory: "1024Mi"
        cpu: "2000m"
    jobs:
      storage_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      db_drop:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_user:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_service:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      ks_endpoints:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      rabbit_init:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      bootstrap:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      tests:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"
      image_repo_sync:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "1024Mi"
          cpu: "2000m"

conf:
  glance:
    DEFAULT:
      workers: {{glance.workers.api}}
      show_multiple_locations: "True"
    glance_store:
      default_store: rbd
      rbd_store_chunk_size: 8
      rbd_store_pool: {{glance.pool_name}}
      rbd_store_user: glance
  glance_registry:
    DEFAULT:
      workers: {{glance.workers.registry}}
    database:
      db_max_retries: -1
  rabbitmq:
    #NOTE(rk760n): adding rmq policy to mirror messages from notification queues and set expiration time for the ones
    policies:
    - vhost: "glance"
      name: "ha_ttl_glance"
      definition:
        #mirror messges to other nodes in rmq cluster
        ha-mode: "all"
        ha-sync-mode: "automatic"
        #70s
        message-ttl: 70000
      priority: 0
      apply-to: all
      pattern: '^(?!amq\.).*'
endpoints:
  object_store:
    namespace: openstack
  ceph_object_store:
    namespace: openstack

{% if not multi_region.master.master_role %}
dependencies:
  static:
    api:
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: oslo_messaging
    bootstrap:
      jobs: null
      services:
        - endpoint: internal
          service: image
    ks_endpoints:
      services: null
    ks_service:
      services: null
    ks_user:
      services: null
    registry:
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: image
    tests:
      services:
        - endpoint: internal
          service: oslo_db
        - endpoint: internal
          service: image
{% endif %}
